import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchItems,addItem,updateItem,deleteItem } from './cartAPI';
const initialState = {
  items: [],
  status: 'idle',
};


export const fetchAsync = createAsyncThunk(
  'cart/fetchItems',
  async () => {
    const response = await fetchItems();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const deleteAsync = createAsyncThunk(
  'cart/deleteItem',
  async (id) => {
   await deleteItem(id);
    // The value we return becomes the `fulfilled` action payload
    return id;
  }
);


export const updateAsync = createAsyncThunk(
  'cart/updateItems',
  async ({id,change}) => {
    const response = await updateItem(id,change );
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const addAsync = createAsyncThunk(
  'cart/addItems',
  async (item) => {
    const {thumbnail,price,brand,title} = item;
    const response = await addItem( {thumbnail,price,brand,title,quantity:1});
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);


export const cartSlice = createSlice({
  name: 'cart',
  initialState,
  reducers: {
 
  },


  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.  //* <---------------  ****  Importent Line   **** 
  extraReducers: (builder) => {
    builder
      .addCase(fetchAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.items = action.payload;
      })
      .addCase(addAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.items.push(action.payload);
      })
      .addCase(deleteAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        const index =  state.items.findIndex(item=>item.id === action.payload)    // database me delete ho chuka hai api call se , ab ui pe delete krna hai 
        state.items.splice(index,1);  // splice ko jise delete krna hai uska index dena hai and number of element you want to delete 
      })
      .addCase(updateAsync.fulfilled, (state, action) => {
        // Api call ne uper db update kr diya , ab yha ui update krna hai 
        state.status = 'idle';
        const index =  state.items.findIndex(item=>item.id === action.payload.id) // yha action.payload me pura item updated aayega , to id alag se nikal,lo
        state.items.splice(index,1,action.payload);    //index pr present item delete krke , action.payload ko replace kr dega 
          });
  },
});

// export const { increment, decrement, incrementByAmount } = cartSlice.actions; 





export default cartSlice.reducer;
