import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchProduct } from './productAPI';
const initialState = {
  products: [],
  status: 'idle',
};


export const fetchAsync = createAsyncThunk(
  'product/fetchProduct',
  async () => {
    const response = await fetchProduct();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const productSlice = createSlice({
  name: 'product',
  initialState,
  reducers: {
 
  },


  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.  //* <---------------  ****  Importent Line   **** 
 

  extraReducers: (builder) => {
    builder
      .addCase(fetchAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.products = action.payload;
      });
  },
});

// export const { increment, decrement, incrementByAmount } = productSlice.actions; 





export default productSlice.reducer;
